# Configuration file for libzbxpgsql plugin for Zabbix
# /etc/zabbix/libzbxpgsql.conf
#

queries = {

######################################################
#  _____            _ _           _   _             
# |  __ \          | (_)         | | (_)            
# | |__) |___ _ __ | |_  ___ __ _| |_ _  ___  _ __  
# |  _  // _ \ '_ \| | |/ __/ _` | __| |/ _ \| '_ \ 
# | | \ \  __/ |_) | | | (_| (_| | |_| | (_) | | | |
# |_|  \_\___| .__/|_|_|\___\__,_|\__|_|\___/|_| |_|
#            | |                                    
#            |_|                                    
######################################################
# NOTES!
#
#   1. The following SQL:
#         "now() > pg_last_xact_replay_timestamp()"
#      is required in certain corner cases where 
#      time drift between two servers causes a
#      negative time lag which converts into a huge
#      unsigned number shown for lag in Zabbix.
#
#   2. The "replpump" method appears to be a good
#      way to force streaming to occur on "quiet"
#      databases without performing updates, but
#      I do not know if there are any potential
#      long-term problems with constantly issuing
#      a notification with no listeners. Based on
#      emails to pg-general it *should not* be a 
#      problem.
#

# Replication Master Discovery
dscrepmstr = "select case when client_hostname is not null "
                        "then client_hostname "
                        "else case when client_addr is not null "
                               "then host(client_addr) "
                               "else 'localhost'::text "
                             "end "
                      "end                 as \"PGSLAVE\" "
                    ", case when client_addr is not null "
                        "then host(client_addr) "
                        "else 'localhost'::text "
                    "  end                 as \"PGSLAVEIP\" "
                 "from pg_stat_replication"
                ";";

# Replication Slave Discovery
dscrepslave = "select 'Slave'      as \"PGSLV\" "
                   ", 'repllag'    as \"PGSLVLAG\" "
                   ", 'replpaused' as \"PGSLVPAUSED\" "
                "where pg_is_in_recovery() = TRUE; "
              ";";

# Force replication to stream when master is idle (EXPERIMENTAL!)
# (executed on master)
replpump = "select replication_pump();";

# Replication lag seconds (measured on slave)
repllag = "select case when pg_is_in_recovery() = TRUE "
                   "then case when now() > pg_last_xact_replay_timestamp() "
                          "then extract(epoch from now() - pg_last_xact_replay_timestamp())::int "
                          "else 0::int "
                        "end "
                   "else 0::int "
                 "end "
          ";";

# Replication lag bytes (measured on master)
repllagbytes = "select pg_xlog_location_diff(pg_current_xlog_location(),replay_location) "
                 "from pg_stat_replication "
                "where (   (    $1::text != 'localhost' "
                           "and client_addr = $1::inet) "
                       "or (    $1::text = 'localhost' "
                           "and client_addr is null) ) "
               ";";

# Replication paused (measured on slave)
replpaused = "select case when pg_is_in_recovery() = TRUE "
                         "then case when pg_is_xlog_replay_paused() = TRUE "
                                   "then 1::int "
                                   "else 0::int "
                                   "end "
                         "else 0::int "
                    "end"
             ";";

};

